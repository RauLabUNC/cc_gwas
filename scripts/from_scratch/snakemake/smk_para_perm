# --- Configuration ---
import os
MODE = os.environ.get("SNAKEMAKE_MODE", "full")

if MODE == "test":
    QTL_TRAITS = ["BW.day.0", "BW.day.21"]
    NORMS = ["boxcox"]
    AGGS = ["individual"]
    DRUGS = ["Ctrl"]
    OUTPUT_PREFIX = "test_"
    PERM_CHUNKS = range(1, 5) # 4 chunks of 5 = 20 perms
    CHUNK_SIZE = 5
else:
    QTL_TRAITS = ["TH"]
    NORMS = ["boxcox"]
    AGGS = ["individual"]
    DRUGS = ["Ctrl"]
    OUTPUT_PREFIX = ""
    PERM_CHUNKS = range(1, 41) # 40 chunks of 5 = 200 perms
    CHUNK_SIZE = 5

PHENO_DIR = "data/processed/phenotypes"
ROPSCAN_SCRIPT = "scripts/from_scratch/snakemake/01_ropScan.R"
PERMTEST_CHUNK_SCRIPT = "scripts/from_scratch/snakemake/02a_runPermChunk.R"
PERMTEST_AGG_SCRIPT = "scripts/from_scratch/snakemake/02b_aggregatePerms.R"

# --- Target Rule ---
rule all:
    input:
        expand("data/processed/" + OUTPUT_PREFIX + "scan_thresholds/{norm}_{agg}_{qtl_trait}_{drug}_threshold.rds",
               norm=NORMS, agg=AGGS, qtl_trait=QTL_TRAITS, drug=DRUGS)

# --- Rule: Run ROP Scan and Generate Permutations ---
rule run_ropscan_and_gen_perms:
    input:
        script=ROPSCAN_SCRIPT,
        processed_pheno=PHENO_DIR + "/{norm}_{agg}_{drug}.csv"
    output:
        scan="data/processed/" + OUTPUT_PREFIX + "ropscan/{norm}_{agg}_{qtl_trait}_{drug}.rds",
        perms="data/processed/" + OUTPUT_PREFIX + "perm_phenos/{norm}_{agg}_{qtl_trait}_{drug}.rds"
    params:
        norm="{norm}",
        agg="{agg}",
        qtl_trait="{qtl_trait}",
        drug="{drug}",
        mode=MODE
    resources:
        mem_mb=1000 if MODE == "test" else 4000,
        time="00:10:00" if MODE == "test" else "00:30:00"
    log:
        stdout=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_ropscan_and_gen_perms/{norm}_{agg}_{qtl_trait}_{drug}/stdout",
        stderr=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_ropscan_and_gen_perms/{norm}_{agg}_{qtl_trait}_{drug}/stderr",
        time=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_ropscan_and_gen_perms/{norm}_{agg}_{qtl_trait}_{drug}/time"
    shell:
        """
        Rscript {input.script} \
            --input {input.processed_pheno} \
            --output_scan {output.scan} \
            --output_perms {output.perms} \
            --normalization {params.norm} \
            --aggregation {params.agg} \
            --qtl_trait {params.qtl_trait} \
            --drug {params.drug} \
            --mode {params.mode} \
            > {log.stdout} 2> {log.stderr}
        
        echo "SLURM_JOB_ID=$SLURM_JOB_ID" >> {log.time} || true
        """

# --- Rule: Run Permutation Scan on a Chunk ---
rule run_permutation_chunk:
    input:
        script=PERMTEST_CHUNK_SCRIPT,
        perms="data/processed/" + OUTPUT_PREFIX + "perm_phenos/{norm}_{agg}_{qtl_trait}_{drug}.rds",
        pheno=PHENO_DIR + "/{norm}_{agg}_{drug}.csv"
    output:
        scan_chunk="data/processed/" + OUTPUT_PREFIX + "perm_chunks/{norm}_{agg}_{qtl_trait}_{drug}/{chunk}.rds"
    params:
        qtl_trait="{qtl_trait}",
        drug="{drug}",
        chunk_size=CHUNK_SIZE,
        mode=MODE
    resources:
        mem_mb=2000 if MODE == "test" else 4000,
        time="00:20:00" if MODE == "test" else "02:00:00"
    log:
        stdout=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_permutation_chunk/{norm}_{agg}_{qtl_trait}_{drug}_{chunk}/stdout",
        stderr=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_permutation_chunk/{norm}_{agg}_{qtl_trait}_{drug}_{chunk}/stderr",
        time=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/run_permutation_chunk/{norm}_{agg}_{qtl_trait}_{drug}_{chunk}/time"
    shell:
        """
        Rscript {input.script} \
            --input_perms {input.perms} \
            --input_pheno {input.pheno} \
            --output_scan_chunk {output.scan_chunk} \
            --qtl_trait {params.qtl_trait} \
            --drug {params.drug} \
            --chunk_index {wildcards.chunk} \
            --chunk_size {params.chunk_size} \
            --mode {params.mode} \
            > {log.stdout} 2> {log.stderr}
        
        echo "SLURM_JOB_ID=$SLURM_JOB_ID" >> {log.time} || true
        """

# --- Rule: Aggregate Permutation Chunks and Get Threshold ---
rule aggregate_permutations:
    input:
        script=PERMTEST_AGG_SCRIPT,
        chunks=expand("data/processed/" + OUTPUT_PREFIX + "perm_chunks/{{norm}}_{{agg}}_{{qtl_trait}}_{{drug}}/{chunk}.rds", chunk=PERM_CHUNKS)
    output:
        threshold="data/processed/" + OUTPUT_PREFIX + "scan_thresholds/{norm}_{agg}_{qtl_trait}_{drug}_threshold.rds",
        max_stats="data/processed/" + OUTPUT_PREFIX + "scan_thresholds/{norm}_{agg}_{qtl_trait}_{drug}_max_stats.rds"
    resources:
        mem_mb=4000 if MODE == "test" else 6000,
        time="00:10:00" if MODE == "test" else "00:30:00"    
    log:
        stdout=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/aggregate_permutations/{norm}_{agg}_{qtl_trait}_{drug}/stdout",
        stderr=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/aggregate_permutations/{norm}_{agg}_{qtl_trait}_{drug}/stderr",
        time=os.environ.get("LOG_DIR", ".slurmlogs/manual") + "/jobs/aggregate_permutations/{norm}_{agg}_{qtl_trait}_{drug}/time"
    shell:
        """
        Rscript {input.script} \
            --output_threshold {output.threshold} \
            --output_max_stats {output.max_stats} \
            {input.chunks} \
            > {log.stdout} 2> {log.stderr}
        
        echo "SLURM_JOB_ID=$SLURM_JOB_ID" >> {log.time} || true
        """