# Minimal Snakemake pipeline for QTL scanning
# Start with just 2 traits on chr 19 for testing

# Configuration
TRAITS = ["BW.day.0", "TH"]  # Just 2 traits to test
CHROMOSOMES = ["19"]  # Just chr 19 for speed
DATA_DIR = "/proj/raulab/projects/cc_gwas/data"
SCRIPTS_DIR = "/proj/raulab/users/brian/claude-test"

# Default target
rule all:
    input:
        expand("results/scans/{trait}_chr{chr}.rds", trait=TRAITS, chr=CHROMOSOMES)

# Rule to run QTL scan
rule qtl_scan:
    input:
        phenotypes = f"{DATA_DIR}/processed/phenotypes/meanCenterScaledByTreat_03242025.csv"
    output:
        "results/scans/{trait}_chr{chr}.rds"
    params:
        genomecache = f"{DATA_DIR}/raw/genomes/Corrected_Haplotypes_Cache_CC_83024",
        helper_script = "/proj/raulab/projects/cc_gwas/scripts/extras/scan_h2lmm.R"
    resources:
        mem_mb = 4000,
        time = "00:30:00"
    log:
        "logs/qtl_scan_{trait}_chr{chr}.log"
    shell:
        """
        export R_LIBS_USER="/nas/longleaf/home/bgural/mambaforge/envs/miqtl-env/lib/R/library:/proj/raulab/users/brian/claude-test/R_packages"
        export LD_LIBRARY_PATH="/nas/longleaf/home/bgural/mambaforge/envs/miqtl-env/lib:${{LD_LIBRARY_PATH}}"
        
        /nas/longleaf/home/bgural/mambaforge/envs/miqtl-env/bin/Rscript -e '
        library(miqtl)
        library(tidyverse)
        source("{params.helper_script}")
        
        # Load data
        phenotypes <- read.csv("{input.phenotypes}")
        
        # Fix column names
        if(!"Sex" %in% names(phenotypes) && "Sex_Binary" %in% names(phenotypes)) {{
          phenotypes$Sex <- phenotypes$Sex_Binary
        }}
        
        # Run scan
        scan_result <- scan.h2lmm.test(
          genomecache = "{params.genomecache}",
          data = phenotypes,
          pheno.id = "gwas_temp_id",
          geno.id = "Strain",
          formula = {wildcards.trait} ~ 0 + Sex,
          use.multi.impute = FALSE,
          return.allele.effects = TRUE,
          use.fix.par = TRUE,
          chr = "{wildcards.chr}"
        )
        
        # Save output
        saveRDS(scan_result, "{output}")
        
        cat("Scan completed for {wildcards.trait} on chr {wildcards.chr}\\n")
        ' 2>&1 | tee {log}
        """